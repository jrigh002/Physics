'''
Three-Body Problem
Final Project
Joshua Rightnar
June 2, 2015
'''
import numpy as np
import math
from visual import *

scene.autoscale=true;
##scene.range=15
'''
Initial values for mass, position, and velocity

These values are changed from those in the book for ease of viewing, but still exist in the same ratios.

These values may be modified to be any number of scenatios such as the orbital mechanics
of a sattelite between the earth and the moon. This can be done by supplying the true
values for weight and relative position and using tangential initial velocities.
However due to processing power constraints and the scope of this project,
we will be using small discrete numbersas an example.

Using the visualallows us to chose values as intrinsic properties of the object.
In computing the derivatives and solution, this distinction does not matter much,
however it is easier to imagine an object with attributes rather than abstract quantities.
'''
m1 = sphere(pos=vector( 30,10,0),vel=vector(0,0,0),
              mass=1.5, color=color.red,
              make_trail=True, interval=2, retain=1000)
m2 = sphere(pos=vector(-10,-20,30),vel=vector(0,0,0),
              mass=2.0, color=color.blue,
              make_trail=True, interval=2, retain=1000)
m3 = sphere(pos=vector( -10,10,0),vel=vector(0,0,0),
              mass=2.5, color=color.white,
              make_trail=True, interval=2, retain=1000)
'''
By using the center of mass frame,
we can view the objects interaction in relation to eachother
We can take advantage of the equation " (mv1+mv2+mv3/M)" and "0.5*m**(1/3)
'''
vcentre=(m1.mass*m1.vel+m2.mass*m2.vel+m3.mass*m3.vel)/(m1.mass+m2.mass+m3.mass)
for a in [m1, m2, m3]:
  a.vel -= vcentre
  a.radius = 0.5*a.mass**(1.0/3.0)

def derive(y):
    '''
    Derive the vectors
    '''
    deriv = np.zeros((6,3), dtype=vector)
    ## Creates an array of all zeros 6 units across and 3 units tall


    r12=y[0]-y[2]; r23=y[2]-y[4]; r31=y[4]-y[0]
    r12c=r12/mag(r12)**3; r23c=r23/mag(r23)**3; r31c=r31/mag(r31)**3
    deriv[1] = -m2.mass*r12c + m3.mass*r31c
    deriv[3] = -m3.mass*r23c + m1.mass*r12c
    deriv[5] = -m1.mass*r31c + m2.mass*r23c
    deriv[0:5:2] = y[1:6:2] 
    return deriv

dt = 0.1
'''
Time interval. The smaller this value, the more accurate the animation,
however this may be limited by the capabilities of your computer.
'''
'''
The rate multiplied by dt should yeild a time period of 10 in our units
'''
while True:
  rate(100)
  '''
  Runge Kutta method for solving a differential equation
  '''
  y = [m1.pos,m1.vel,m2.pos,m2.vel,m3.pos,m3.vel]
  k1 = dt*derive(y);  k2 = dt*derive(y+k1/2.0)
  k3 = dt*derive(y+k2/2.0);  k4 = dt*derive(y+k3)
  dy = k1/6.0 + k2/3.0 +k3/3.0 + k4/6.0
  '''
  Updating the animation for position
  '''
  m1.pos += dy[0]; m1.vel += dy[1]
  m2.pos += dy[2]; m2.vel += dy[3]
  m3.pos += dy[4]; m3.vel += dy[5]
